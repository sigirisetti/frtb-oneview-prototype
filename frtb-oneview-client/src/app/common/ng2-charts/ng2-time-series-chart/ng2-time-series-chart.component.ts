import { Component, Input, ViewChild } from '@angular/core';
import { Chart, ChartConfiguration, ChartEvent, ChartType } from 'chart.js';
import Annotation from 'chartjs-plugin-annotation';
import { BaseChartDirective } from 'ng2-charts';

@Component({
  selector: 'app-ng2-time-series-chart',
  templateUrl: './ng2-time-series-chart.component.html',
  styleUrls: ['./ng2-time-series-chart.component.scss']
})
export class Ng2TimeSeriesChartComponent {

  tsData: number[] = [28.629999, 28.889999, 28.51, 29.42, 29.219999, 29.219999, 28.83, 29.110001, 29.379999, 29.34, 29.51, 29.040001, 28.9, 28.92, 28.73, 28.620001, 28.4, 28.049999, 27.68, 27.209999, 27.09, 26.950001, 26.98, 26.83, 26.84, 26.85, 26.620001, 26.450001, 26.4, 26.549999, 26.49, 26.610001, 26.25, 26.15, 26.68, 26.620001, 26.4, 26.43, 26.41, 26.790001, 26.360001, 26.049999, 26.040001, 26.41, 26.459999, 27.370001, 27.1, 27.459999, 27.5, 27.74, 28, 28.26, 27.549999, 27.889999, 27.73, 27.780001, 27.84, 27.809999, 27.200001, 27.15, 27.41, 27.32, 27.200001, 26.879999, 26.85, 27, 26.799999, 27.33, 27.51, 27.35, 27.51, 27.469999, 27.190001, 27.32, 27.33, 27.18, 27.049999, 27.16, 27.1, 26.889999, 27.07, 27.33, 27.42, 27.559999, 27.280001, 27.299999, 27.190001, 27.24, 27.389999, 27.68, 27.530001, 27.139999, 26.83, 26.57, 26.16, 26.129999, 26.16, 26.07, 26.15, 26.5, 26.66, 26.700001, 26.33, 26.32, 26.389999, 26.15, 26.26, 26.09, 26.26, 26.27, 26.16, 25.99, 26.129999, 26.08, 26.02, 27.059999, 27.76, 28.01, 28.07, 28.02, 28.4, 28.5, 28.85, 29.139999, 29.209999, 29.5, 29.950001, 30, 29.84, 30.16, 30.25, 30.030001, 30.110001, 30.15, 30.27, 30.25, 30.299999, 30.799999, 31.200001, 31.33, 30.91, 31, 30.799999, 30.559999, 30.73, 31.049999, 31.1, 31.25, 30.91, 30.870001, 30.719999, 30.959999, 31.040001, 31, 31.16, 30.9, 30.93, 30.959999, 30.799999, 30.700001, 30.700001, 30.459999, 30.969999, 30.84, 30.67, 30.1, 30.09, 29.92, 30.530001, 29.66, 29.4, 29.33, 29.209999, 29.4, 29.91, 30.129999, 30.190001, 30.07, 29.83, 29.73, 29.629999, 30.16, 30.34, 30.540001, 30.84, 30.4, 30.549999, 30.23, 30.26, 29.879999, 30.700001, 30.98, 30.67, 30.65, 30.99, 29.620001, 29.85, 29.940001, 29.92, 29.93, 29.65, 29.540001, 29.5, 29.450001, 29.469999, 29.309999, 28.68, 28.290001, 27.84, 28.200001, 28, 28.540001, 28.209999, 28.68, 29.5, 29.42, 29.290001, 29.48, 29.76, 29.950001, 29.84, 29.76, 29.639999, 29.93, 29.950001, 29.82, 29.93, 30.059999, 30.01, 29.950001, 30.129999, 30.049999, 29.85, 30.1, 29.719999, 29.690001, 29.58, 29.4, 29.26, 29.110001, 28.219999, 28.26, 28.059999, 28.049999, 27.99, 28.41, 28.17, 28.120001, 27.98, 27.77, 27.98, 27.889999,];

  seriesMin: number = Math.min(...this.tsData);
  seriesMax: number = Math.max(...this.tsData);
  seriesAvg: number = this.tsData.reduce((a, b) => a + b, 0) / this.tsData.length;
  seriesVol: number = this.getStandardDeviation(this.tsData);

  @Input() labels = [];

  @Input() dataSets = [];

  private newLabel?= 'New label';

  constructor() {
    Chart.register(Annotation)
  }

  ngOnInit() {

  }

  getStandardDeviation(array: number[]) {
    const n = array.length
    const mean = array.reduce((a, b) => a + b) / n
    return Math.sqrt(array.map(x => Math.pow(x - mean, 2)).reduce((a, b) => a + b) / n)
  }

  public lineChartData: ChartConfiguration['data'] = {
    datasets: [
      {
        data: this.tsData,
        label: 'U11.SI',
        backgroundColor: 'rgba(255,0,0,0.3)',
        borderColor: 'red',
        pointBackgroundColor: 'rgba(148,159,177,1)',
        pointBorderColor: '#fff',
        pointHoverBackgroundColor: '#fff',
        pointHoverBorderColor: 'rgba(148,159,177,0.8)',
        fill: 'origin',
      },
    ],
    labels: ['2022-05-17', '2022-05-18', '2022-05-19', '2022-05-20', '2022-05-23', '2022-05-24', '2022-05-25', '2022-05-26', '2022-05-27', '2022-05-30', '2022-05-31', '2022-06-01', '2022-06-02', '2022-06-03', '2022-06-06', '2022-06-07', '2022-06-08', '2022-06-09', '2022-06-10', '2022-06-13', '2022-06-14', '2022-06-15', '2022-06-16', '2022-06-17', '2022-06-20', '2022-06-21', '2022-06-22', '2022-06-23', '2022-06-24', '2022-06-27', '2022-06-28', '2022-06-29', '2022-06-30', '2022-07-01', '2022-07-04', '2022-07-05', '2022-07-06', '2022-07-07', '2022-07-08', '2022-07-12', '2022-07-13', '2022-07-14', '2022-07-15', '2022-07-18', '2022-07-19', '2022-07-20', '2022-07-21', '2022-07-22', '2022-07-25', '2022-07-26', '2022-07-27', '2022-07-28', '2022-07-29', '2022-08-01', '2022-08-02', '2022-08-03', '2022-08-04', '2022-08-05', '2022-08-08', '2022-08-10', '2022-08-11', '2022-08-12', '2022-08-15', '2022-08-16', '2022-08-17', '2022-08-18', '2022-08-19', '2022-08-22', '2022-08-23', '2022-08-24', '2022-08-25', '2022-08-26', '2022-08-29', '2022-08-30', '2022-08-31', '2022-09-01', '2022-09-02', '2022-09-05', '2022-09-06', '2022-09-07', '2022-09-08', '2022-09-09', '2022-09-12', '2022-09-13', '2022-09-14', '2022-09-15', '2022-09-16', '2022-09-19', '2022-09-20', '2022-09-21', '2022-09-22', '2022-09-23', '2022-09-26', '2022-09-27', '2022-09-28', '2022-09-29', '2022-09-30', '2022-10-03', '2022-10-04', '2022-10-05', '2022-10-06', '2022-10-07', '2022-10-10', '2022-10-11', '2022-10-12', '2022-10-13', '2022-10-14', '2022-10-17', '2022-10-18', '2022-10-19', '2022-10-20', '2022-10-21', '2022-10-25', '2022-10-26', '2022-10-27', '2022-10-28', '2022-10-31', '2022-11-01', '2022-11-02', '2022-11-03', '2022-11-04', '2022-11-07', '2022-11-08', '2022-11-09', '2022-11-10', '2022-11-11', '2022-11-14', '2022-11-15', '2022-11-16', '2022-11-17', '2022-11-18', '2022-11-21', '2022-11-22', '2022-11-23', '2022-11-24', '2022-11-25', '2022-11-28', '2022-11-29', '2022-11-30', '2022-12-01', '2022-12-02', '2022-12-05', '2022-12-06', '2022-12-07', '2022-12-08', '2022-12-09', '2022-12-12', '2022-12-13', '2022-12-14', '2022-12-15', '2022-12-16', '2022-12-19', '2022-12-20', '2022-12-21', '2022-12-22', '2022-12-23', '2022-12-27', '2022-12-28', '2022-12-29', '2022-12-30', '2023-01-03', '2023-01-04', '2023-01-05', '2023-01-06', '2023-01-09', '2023-01-10', '2023-01-11', '2023-01-12', '2023-01-13', '2023-01-16', '2023-01-17', '2023-01-18', '2023-01-19', '2023-01-20', '2023-01-25', '2023-01-26', '2023-01-27', '2023-01-30', '2023-01-31', '2023-02-01', '2023-02-02', '2023-02-03', '2023-02-06', '2023-02-07', '2023-02-08', '2023-02-09', '2023-02-10', '2023-02-13', '2023-02-14', '2023-02-15', '2023-02-16', '2023-02-17', '2023-02-20', '2023-02-21', '2023-02-22', '2023-02-23', '2023-02-24', '2023-02-27', '2023-02-28', '2023-03-01', '2023-03-02', '2023-03-03', '2023-03-06', '2023-03-07', '2023-03-08', '2023-03-09', '2023-03-10', '2023-03-13', '2023-03-14', '2023-03-15', '2023-03-16', '2023-03-17', '2023-03-20', '2023-03-21', '2023-03-22', '2023-03-23', '2023-03-24', '2023-03-27', '2023-03-28', '2023-03-29', '2023-03-30', '2023-03-31', '2023-04-03', '2023-04-04', '2023-04-05', '2023-04-06', '2023-04-10', '2023-04-11', '2023-04-12', '2023-04-13', '2023-04-14', '2023-04-17', '2023-04-18', '2023-04-19', '2023-04-20', '2023-04-21', '2023-04-24', '2023-04-25', '2023-04-26', '2023-04-27', '2023-04-28', '2023-05-02', '2023-05-03', '2023-05-04', '2023-05-05', '2023-05-08', '2023-05-09', '2023-05-10', '2023-05-11', '2023-05-12', '2023-05-15', '2023-05-16',]
  };

  public lineChartOptions: ChartConfiguration['options'] = {
    elements: {
      line: {
        tension: 0
      }
    },
    scales: {
      // We use this empty structure as a placeholder for dynamic theming.
      y:
      {
        position: 'left',
      },
    },

    plugins: {
      legend: { display: true },
      annotation: {
        annotations: [

        ],
      }
    }
  };

  public lineChartType: ChartType = 'line';

  @ViewChild(BaseChartDirective) chart?: BaseChartDirective;

  // events
  public chartClicked({ event, active }: { event?: ChartEvent, active?: {}[] }): void {
    //console.log(event, active);
  }

  public chartHovered({ event, active }: { event?: ChartEvent, active?: {}[] }): void {
    //console.log(event, active);
  }

}
